{"version":3,"file":"main.6ae21fab631dea41.hot-update.js","sources":["file:///Users/worldofmadness/Documents/VS Code/TIKTOK/doodle_value_sharing/doodle_v1/src/components/EngagementBar.tsx","file://webpack/runtime/get_full_hash","file://webpack/runtime/lynx css hot update"],"sourcesContent":["import { useState, useCallback, useEffect } from '@lynx-js/react';\nimport type { Video, User } from '../types.js';\nimport { calculateEngagementScore, formatNumber, getVideoPhase, getTimeRemaining } from '../types.js';\n\ninterface EngagementBarProps {\n  video: Video;\n  user: User;\n  onBoost: (amount: number) => void;\n}\n\ninterface BoostModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onBoost: (amount: number) => void;\n  userCoins: number;\n  videoId: number;\n}\n\nconst BoostModal: React.FC<BoostModalProps> = ({ isOpen, onClose, onBoost, userCoins }) => {\n  const [boostAmount, setBoostAmount] = useState(10);\n  const [selectedAmount, setSelectedAmount] = useState<number | null>(null);\n\n  const presetAmounts = [10, 25, 50, 100, 250];\n\n  const handleBoost = useCallback(() => {\n    if (boostAmount <= userCoins && boostAmount > 0) {\n      onBoost(boostAmount); // 🔑 when this fires → EngagementBar.triggerBoost runs\n      onClose();\n    }\n  }, [boostAmount, userCoins, onBoost, onClose]);\n\n  const handlePresetSelect = useCallback(\n    (amount: number) => {\n      if (amount <= userCoins) {\n        setBoostAmount(amount);\n        setSelectedAmount(amount);\n      }\n    },\n    [userCoins]\n  );\n\n  if (!isOpen) return null;\n\n  return (\n    <view\n      style={{\n        position: 'fixed' as any,\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        display: 'flex' as any,\n        alignItems: 'center' as any,\n        justifyContent: 'center' as any,\n        zIndex: 1000,\n      }}\n    >\n      <view\n        style={{\n          backgroundColor: '#1a1a1a',\n          borderRadius: '15px',\n          padding: '24px',\n          width: '90%',\n          maxWidth: '400px',\n          border: '1px solid #333',\n        }}\n      >\n        <view\n          style={{\n            display: 'flex' as any,\n            justifyContent: 'space-between' as any,\n            alignItems: 'center' as any,\n            marginBottom: '20px',\n          }}\n        >\n          <text style={{ color: '#fff', fontSize: '20px', fontWeight: 'bold' as any }}>\n            🚀 Boost This Video\n          </text>\n          <text\n            style={{ color: '#fff', fontSize: '24px', cursor: 'pointer' as any }}\n            bindtap={onClose}\n          >\n            ×\n          </text>\n        </view>\n\n        <view style={{ marginBottom: '20px' }}>\n          <text style={{ color: '#888', fontSize: '16px', marginBottom: '8px' }}>\n            Your Coins: {formatNumber(userCoins)} 🪙\n          </text>\n          <text style={{ color: '#888', fontSize: '14px' }}>\n            Invest coins in content you believe will perform well. Higher engagement = higher\n            rewards!\n          </text>\n        </view>\n\n        <view style={{ marginBottom: '20px' }}>\n          <text style={{ color: '#fff', fontSize: '16px', marginBottom: '12px' }}>\n            Select Amount:\n          </text>\n          <view\n            style={{\n              display: 'flex' as any,\n              flexDirection: 'row' as any,\n              flexWrap: 'wrap' as any,\n              gap: '8px',\n            }}\n          >\n            {presetAmounts.map((amount) => (\n              <view\n                key={amount}\n                style={{\n                  backgroundColor: selectedAmount === amount ? '#ff0050' : '#333',\n                  padding: '8px 16px',\n                  borderRadius: '20px',\n                  cursor: 'pointer' as any,\n                  opacity: amount > userCoins ? 0.5 : 1,\n                }}\n                bindtap={() => handlePresetSelect(amount)}\n              >\n                <text style={{ color: '#fff', fontSize: '16px' }}>{amount} 🪙</text>\n              </view>\n            ))}\n          </view>\n        </view>\n\n        <view\n          style={{\n            display: 'flex' as any,\n            flexDirection: 'row' as any,\n            gap: '12px',\n            marginTop: '20px',\n          }}\n        >\n          <view\n            style={{\n              flex: 0.8,\n              backgroundColor: '#333',\n              padding: '10px 8px',\n              borderRadius: '8px',\n              cursor: 'pointer' as any,\n              minWidth: '80px',\n              maxWidth: '100px',\n            }}\n            bindtap={onClose}\n          >\n            <text\n              style={{\n                color: '#fff',\n                textAlign: 'center' as any,\n                fontSize: '15px',\n                paddingTop: '4px',\n              }}\n            >\n              Cancel\n            </text>\n          </view>\n          <view\n            style={{\n              flex: 1.5,\n              backgroundColor: boostAmount > 0 && boostAmount <= userCoins ? '#ff0050' : '#666',\n              padding: '14px 12px',\n              borderRadius: '8px',\n              cursor: boostAmount > 0 && boostAmount <= userCoins ? 'pointer' : 'not-allowed',\n              opacity: boostAmount > 0 && boostAmount <= userCoins ? 1 : 0.5,\n              minWidth: '120px',\n            }}\n            bindtap={handleBoost}\n          >\n            <text\n              style={{\n                color: '#fff',\n                textAlign: 'center' as any,\n                fontSize: '17px',\n                fontWeight: 'bold' as any,\n                whiteSpace: 'nowrap' as any,\n              }}\n            >\n              🚀 Boost {boostAmount} 🪙\n            </text>\n          </view>\n        </view>\n      </view>\n    </view>\n  );\n};\n\nconst EngagementBar: React.FC<EngagementBarProps> = ({ video, user, onBoost }) => {\n  const [isBoostModalOpen, setIsBoostModalOpen] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [fluctuationOffset, setFluctuationOffset] = useState(0);\n  const baseEngagementScore = calculateEngagementScore(video);\n  const engagementScore = Math.max(0, Math.min(100, baseEngagementScore + fluctuationOffset));\n  const scorePercentage = engagementScore;\n\n  // ---- BOOST EFFECT STATE ----\n  const [boostStrength, setBoostStrength] = useState(0);\n\n  // 🔑 Trigger boost effect (called inside onBoost handler)\n  const triggerBoost = useCallback((amount: number) => {\n    const boostEffect = Math.log(amount + 1) * 2; // diminishing returns\n    setBoostStrength((prev) => prev + boostEffect);\n  }, []);\n\n  // Fluctuation + boost logic\n  useEffect(() => {\n    const deviation = 2;\n    let prevEngagement = calculateEngagementScore(video);\n\n    const interval = setInterval(() => {\n      // Gaussian noise\n      const randStdNormal = () => {\n        let u = 0,\n          v = 0;\n        while (u === 0) u = Math.random();\n        while (v === 0) v = Math.random();\n        return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n      };\n      const step = randStdNormal() * deviation * randStdNormal();\n\n      // Decay boost each tick\n      let currentBoost = boostStrength;\n      if (currentBoost > 0) {\n        setBoostStrength(currentBoost * 0.85);\n      }\n\n      // Compute target engagement\n      let targetEngagement = prevEngagement + step + currentBoost;\n\n      // Smooth interpolation\n      const smoothing = 0.3;\n      let newEngagement =\n        prevEngagement * (1 - smoothing) + targetEngagement * smoothing;\n\n      // Clamp\n      newEngagement = Math.max(0, Math.min(100, newEngagement));\n      prevEngagement = newEngagement;\n\n      setFluctuationOffset(newEngagement - baseEngagementScore);\n    }, 1500);\n\n    return () => clearInterval(interval);\n  }, [video, baseEngagementScore, boostStrength]);\n\n  // ---- Phase / UI helpers ----\n  const currentPhase = getVideoPhase(video);\n  const canBoost = currentPhase === 'boosting';\n\n  const getPhaseTimeRemaining = () => {\n    switch (currentPhase) {\n      case 'boosting':\n        return getTimeRemaining(video.boostWindowEnd);\n      case 'locked':\n        return getTimeRemaining(video.lockPeriodEnd);\n      case 'claiming':\n        return getTimeRemaining(video.claimPeriodEnd);\n      default:\n        return 'Closed';\n    }\n  };\n  const getPhaseLabel = () => {\n    switch (currentPhase) {\n      case 'boosting':\n        return '🚀 Boost Window';\n      case 'locked':\n        return '🔒 Lock Period';\n      case 'claiming':\n        return '💰 Claim Period';\n      default:\n        return '⏰ Closed';\n    }\n  };\n  const getPhaseColor = () => {\n    switch (currentPhase) {\n      case 'boosting':\n        return '#00ff88';\n      case 'locked':\n        return '#ffaa00';\n      case 'claiming':\n        return '#4dabf7';\n      default:\n        return '#666';\n    }\n  };\n\n  // Expand / collapse\n  const handleExpand = useCallback(() => setIsExpanded(true), []);\n  const handleCollapse = useCallback(() => setIsExpanded(false), []);\n  const handleOpenBoost = useCallback(() => setIsBoostModalOpen(true), []);\n  const handleCloseBoost = useCallback(() => setIsBoostModalOpen(false), []);\n\n  // Wrap onBoost so we also trigger visual effect\n  const handleBoost = useCallback(\n    (amount: number) => {\n      onBoost(amount); \n      triggerBoost(amount); \n    },\n    [onBoost, triggerBoost]\n  );\n\n  return (\n    <>\n      <view\n        style={{\n          position: 'absolute' as any,\n          left: '12px',\n          bottom: '120px',\n          zIndex: 10,\n          backgroundColor: 'rgba(0, 0, 0, 0.7)',\n          borderRadius: '25px',\n          padding: isExpanded ? '16px' : '8px',\n          minHeight: isExpanded ? '200px' : '60px',\n          width: isExpanded ? '160px' : '48px',\n        }}\n      >\n        {!isExpanded ? (\n          // Collapsed\n          <view\n            style={{\n              display: 'flex' as any,\n              flexDirection: 'column' as any,\n              alignItems: 'center' as any,\n              height: '100%',\n            }}\n            bindtap={handleExpand}\n          >\n            <text style={{ fontSize: '20px', marginBottom: '6px' }}>🚀</text>\n            <view\n              style={{\n                width: '6px',\n                height: '45px',\n                backgroundColor: '#333',\n                borderRadius: '3px',\n                overflow: 'hidden' as any,\n                display: 'flex' as any,\n                alignItems: 'flex-end' as any,\n              }}\n            >\n              <view\n                style={{\n                  width: '100%',\n                  height: `${scorePercentage}%`,\n                  backgroundColor:\n                    scorePercentage > 70\n                      ? '#00ff88'\n                      : scorePercentage > 40\n                      ? '#ffaa00'\n                      : '#ff4444',\n                  borderRadius: '2px',\n                }}\n              />\n            </view>\n          </view>\n        ) : (\n          // Expanded\n          <view style={{ display: 'flex' as any, flexDirection: 'column', height: '100%' }}>\n            <view\n              style={{\n                display: 'flex' as any,\n                flexDirection: 'row' as any,\n                justifyContent: 'space-between' as any,\n                alignItems: 'center' as any,\n                marginBottom: '12px',\n              }}\n            >\n              <text style={{ color: '#fff', fontSize: '14px', fontWeight: 'bold' as any }}>\n                Engagement\n              </text>\n              <text\n                style={{ color: '#fff', fontSize: '16px', cursor: 'pointer' as any }}\n                bindtap={handleCollapse}\n              >\n                ×\n              </text>\n            </view>\n\n            <view style={{ marginBottom: '12px' }}>\n              <text\n                style={{\n                  color: '#fff',\n                  fontSize: '20px',\n                  fontWeight: 'bold' as any,\n                  textAlign: 'center' as any,\n                }}\n              >\n                {scorePercentage.toFixed(1)}\n              </text>\n              <view\n                style={{\n                  width: '100%',\n                  height: '8px',\n                  backgroundColor: '#333',\n                  borderRadius: '4px',\n                  overflow: 'hidden' as any,\n                  marginTop: '4px',\n                }}\n              >\n                <view\n                  style={{\n                    width: `${scorePercentage}%`,\n                    height: '100%',\n                    backgroundColor:\n                      scorePercentage > 70\n                        ? '#00ff88'\n                        : scorePercentage > 40\n                        ? '#ffaa00'\n                        : '#ff4444',\n                    borderRadius: '4px',\n                  }}\n                />\n              </view>\n            </view>\n\n            {/* Phase Info */}\n            <view style={{ marginBottom: '12px' }}>\n              <text\n                style={{\n                  color: getPhaseColor(),\n                  fontSize: '10px',\n                  textAlign: 'center' as any,\n                  fontWeight: 'bold' as any,\n                  marginBottom: '2px',\n                }}\n              >\n                {getPhaseLabel()}\n              </text>\n              <text style={{ color: '#888', fontSize: '9px', textAlign: 'center' as any }}>\n                {getPhaseTimeRemaining()}\n              </text>\n            </view>\n\n            {/* Pool + Boosts */}\n            <view style={{ marginBottom: '12px' }}>\n              <text\n                style={{ color: '#888', fontSize: '11px', textAlign: 'center' as any }}\n              >\n                Pool: {formatNumber(video.boostPool)} 🪙\n              </text>\n              <text\n                style={{ color: '#888', fontSize: '11px', textAlign: 'center' as any }}\n              >\n                Boosts: {video.totalBoosts}\n              </text>\n            </view>\n\n            {/* Action */}\n            {canBoost ? (\n              <view\n                style={{\n                  backgroundColor: '#ff0050',\n                  padding: '8px 12px',\n                  borderRadius: '20px',\n                  cursor: 'pointer' as any,\n                  marginTop: 'auto',\n                }}\n                bindtap={handleOpenBoost}\n              >\n                <text\n                  style={{\n                    color: '#fff',\n                    fontSize: '12px',\n                    fontWeight: 'bold' as any,\n                    textAlign: 'center' as any,\n                  }}\n                >\n                  🚀 Boost\n                </text>\n              </view>\n            ) : (\n              <view\n                style={{\n                  backgroundColor: '#666',\n                  padding: '8px',\n                  borderRadius: '20px',\n                  opacity: 0.6,\n                }}\n              >\n                <text\n                  style={{\n                    color: '#fff',\n                    fontSize: '12px',\n                    textAlign: 'center' as any,\n                  }}\n                >\n                  {currentPhase === 'locked' ? '🔒 Locked' : '⏰ Closed'}\n                </text>\n              </view>\n            )}\n          </view>\n        )}\n      </view>\n\n      {/* Modal */}\n      <BoostModal\n        isOpen={isBoostModalOpen}\n        onClose={handleCloseBoost}\n        onBoost={handleBoost} \n        userCoins={user.coins}\n        videoId={video.id}\n      />\n    </>\n  );\n};\n\nexport default EngagementBar;\n","__webpack_require__.h = () => (\"1990c152b74b30b1\")","\n__webpack_require__.cssHotUpdateList = [[\"main\",\".rspeedy/main/main.6ae21fab631dea41.css.hot-update.json\"]];\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;AAuHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnBA;;;;;;;;AAzDA;;AAcA;;;AAUA;;;AAOA;;;;;AAIA;;;;;AAOA;;;AACA;;;;;;;;;AAGA;;;;;AAMA;;;AACA;;;;;;;AA8BA;;;AAQA;;;AAYA;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;;AAsCA;AAgEA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AA/EA;;AAYA;AAQA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;;;;;;AAVA;;;;;;;;;;;AAoEA;;;;;;;;AAOA;;;;AAqIA;;AAQA;;;;;AAEA;;;;;;;;;;;;;;;;;;;;AAkDA;;;;;;;;;;;;;;;;;;;AAgDA;;;;;;;;AAsBA;;AAUA;;;;;;;;;;;;;;;AAYA;;AAQA;;;;;;;;;;;;;;;AA3HA;;AAEA;;;AAQA;;;;;AAIA;;;;;AAOA;;;;;AAYA;;;;;AA0BA;;;;;;;AAkBA;;;AAEA;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5PA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAGA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AASA;AAeA;AACA;AACA;AACA;AAMA;AACA;;;;;;AAKA;;AAgBA;AA4BA;AACA;AACA;AACA;AAMA;AACA;;;AA/BA;AAQA;;;;;;AA8BA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;AAEA;AACA;;;;;;;AASA;;;AAKA;;;AAKA;;AASA;;;;;;AAcA;AAeA;;;;;;;;;;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzfA;;;;ACAA;AACA"}
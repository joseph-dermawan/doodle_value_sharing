{"version":3,"file":"main__main-thread.bb7d82a520f94ae2.hot-update.js","sources":["file:///Users/worldofmadness/Documents/VS Code/TIKTOK/doodle_value_sharing/doodle_v1/src/components/EngagementBar.tsx","file://webpack/runtime/get_full_hash","file://webpack/runtime/lynx css hot update"],"sourcesContent":["import { useState, useCallback, useEffect } from '@lynx-js/react';\nimport type { Video, User, Boost } from '../types.js';\nimport { calculateEngagementScore, formatNumber, getVideoPhase, getTimeRemaining, calculateFinalPrizePool } from '../types.js';\n\ninterface EngagementBarProps {\n  video: Video;\n  user: User;\n  onBoost: (amount: number) => void;\n}\n\ninterface BoostModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onBoost: (amount: number) => void;\n  userCoins: number;\n  videoId: number;\n}\n\nconst BoostModal: React.FC<BoostModalProps> = ({ isOpen, onClose, onBoost, userCoins, videoId }) => {\n  const [boostAmount, setBoostAmount] = useState(10);\n  const [selectedAmount, setSelectedAmount] = useState<number | null>(null);\n\n  const presetAmounts = [10, 25, 50, 100, 250];\n\n  const handleBoost = useCallback(() => {\n    'background only';\n    if (boostAmount <= userCoins && boostAmount > 0) {\n      onBoost(boostAmount);\n      onClose();\n    }\n  }, [boostAmount, userCoins, onBoost, onClose]);\n\n  const handlePresetSelect = useCallback((amount: number) => {\n    'background only';\n    if (amount <= userCoins) {\n      setBoostAmount(amount);\n      setSelectedAmount(amount);\n    }\n  }, [userCoins]);\n\n  const handleClose = useCallback(() => {\n    'background only';\n    onClose();\n  }, [onClose]);\n\n  if (!isOpen) return null;\n\n  return (\n    <view style={{\n      position: 'fixed' as any,\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'rgba(0, 0, 0, 0.8)',\n      display: 'flex' as any,\n      alignItems: 'center' as any,\n      justifyContent: 'center' as any,\n      zIndex: 1000\n    }}>\n      <view style={{\n        backgroundColor: '#1a1a1a',\n        borderRadius: '15px',\n        padding: '24px',\n        width: '90%',\n        maxWidth: '400px',\n        border: '1px solid #333'\n      }}>\n        <view style={{\n          display: 'flex' as any,\n          justifyContent: 'space-between' as any,\n          alignItems: 'center' as any,\n          marginBottom: '20px'\n        }}>\n          <text style={{\n            color: '#fff',\n            fontSize: '20px',\n            fontWeight: 'bold' as any\n          }}>\n            🚀 Boost This Video\n          </text>\n          <text \n            style={{\n              color: '#fff',\n              fontSize: '24px',\n              cursor: 'pointer' as any\n            }}\n            bindtap={handleClose}\n          >\n            ×\n          </text>\n        </view>\n\n        <view style={{ marginBottom: '20px' }}>\n          <text style={{\n            color: '#888',\n            fontSize: '16px',\n            marginBottom: '8px'\n          }}>\n            Your Coins: {formatNumber(userCoins)} 🪙\n          </text>\n          <text style={{\n            color: '#888',\n            fontSize: '14px'\n          }}>\n            Invest coins in content you believe will perform well. Higher engagement = higher rewards!\n          </text>\n        </view>\n\n        <view style={{ marginBottom: '20px' }}>\n          <text style={{\n            color: '#fff',\n            fontSize: '16px',\n            marginBottom: '12px'\n          }}>\n            Select Amount:\n          </text>\n          <view style={{\n            display: 'flex' as any,\n            flexDirection: 'row' as any,\n            flexWrap: 'wrap' as any,\n            gap: '8px'\n          }}>\n            {presetAmounts.map(amount => (\n              <view\n                key={amount}\n                style={{\n                  backgroundColor: selectedAmount === amount ? '#ff0050' : '#333',\n                  padding: '8px',\n                  paddingLeft: '16px',\n                  paddingRight: '16px',\n                  borderRadius: '20px',\n                  cursor: 'pointer' as any,\n                  opacity: amount > userCoins ? 0.5 : 1\n                }}\n                bindtap={() => handlePresetSelect(amount)}\n              >\n                <text style={{\n                  color: '#fff',\n                  fontSize: '16px'\n                }}>\n                  {amount} 🪙\n                </text>\n              </view>\n            ))}\n          </view>\n        </view>\n\n        <view style={{\n          display: 'flex' as any,\n          flexDirection: 'row' as any,\n          gap: '12px',\n          marginTop: '20px'\n        }}>\n          <view\n            style={{\n              flex: 0.8,\n              backgroundColor: '#333',\n              padding: '10px 8px',\n              borderRadius: '8px',\n              cursor: 'pointer' as any,\n              minWidth: '80px',\n              maxWidth: '100px'\n            }}\n            bindtap={handleClose}\n          >\n            <text style={{\n              color: '#fff',\n              textAlign: 'center' as any,\n              fontSize: '15px',\n              padding: '2px 0',\n              paddingTop: '4px',\n            }}>\n              Cancel\n            </text>\n          </view>\n          <view\n            style={{\n              flex: 1.5,\n              backgroundColor: boostAmount > 0 && boostAmount <= userCoins ? '#ff0050' : '#666',\n              padding: '14px 12px',\n              borderRadius: '8px',\n              cursor: boostAmount > 0 && boostAmount <= userCoins ? 'pointer' : 'not-allowed',\n              opacity: boostAmount > 0 && boostAmount <= userCoins ? 1 : 0.5,\n              minWidth: '120px'\n            }}\n            bindtap={handleBoost}\n          >\n            <text style={{\n              color: '#fff',\n              textAlign: 'center' as any,\n              fontSize: '17px',\n              fontWeight: 'bold' as any,\n              whiteSpace: 'nowrap' as any\n            }}>\n              🚀 Boost {boostAmount} 🪙\n            </text>\n          </view>\n        </view>\n            </view>\n          </view>\n        );\n      };\n\nconst EngagementBar: React.FC<EngagementBarProps> = ({ video, user, onBoost }) => {\n  const [isBoostModalOpen, setIsBoostModalOpen] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [fluctuationOffset, setFluctuationOffset] = useState(0);\n  \n  const baseEngagementScore = calculateEngagementScore(video);\n  const engagementScore = Math.max(0, Math.min(100, baseEngagementScore + fluctuationOffset));\n  const scorePercentage = engagementScore;\n  \n  // Get current phase and timing info\n  const currentPhase = getVideoPhase(video);\n  const canBoost = currentPhase === 'boosting';\n  \n  // Get time remaining for current phase\n  const getPhaseTimeRemaining = () => {\n    switch (currentPhase) {\n      case 'boosting':\n        return getTimeRemaining(video.boostWindowEnd);\n      case 'locked':\n        return getTimeRemaining(video.lockPeriodEnd);\n      case 'claiming':\n        return getTimeRemaining(video.claimPeriodEnd);\n      default:\n        return 'Closed';\n    }\n  };\n  \n  const getPhaseLabel = () => {\n    switch (currentPhase) {\n      case 'boosting':\n        return '🚀 Boost Window';\n      case 'locked':\n        return '🔒 Lock Period';\n      case 'claiming':\n        return '💰 Claim Period';\n      default:\n        return '⏰ Closed';\n    }\n  };\n  \n  const getPhaseColor = () => {\n    switch (currentPhase) {\n      case 'boosting':\n        return '#00ff88';\n      case 'locked':\n        return '#ffaa00';\n      case 'claiming':\n        return '#4dabf7';\n      default:\n        return '#666';\n    }\n  };\n\n  const handleExpand = useCallback(() => {\n    'background only';\n    setIsExpanded(true);\n  }, []);\n\n  const handleCollapse = useCallback(() => {\n    'background only';\n    setIsExpanded(false);\n  }, []);\n\n  const handleOpenBoost = useCallback(() => {\n    'background only';\n    setIsBoostModalOpen(true);\n  }, []);\n\n  const handleCloseBoost = useCallback(() => {\n    'background only';\n    setIsBoostModalOpen(false);\n  }, []);\n    \n  const [trendBoost, setTrendBoost] = useState(0);\n\n    // Engagement fluctuation simulation with stronger, time-limited boost effect\n  useEffect(() => {\n    const deviation = 5;\n    let prevEngagement = calculateEngagementScore(video); // Start from base score\n    let boostTicks = 0;\n    let isBoostActive = false;\n\n    const interval = setInterval(() => {\n      // Generate a normal-distributed random value, multiplied by random sign\n      const randStdNormal = () => {\n        let u = 0, v = 0;\n        while(u === 0) u = Math.random();\n        while(v === 0) v = Math.random();\n        return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n      };\n      const sign = Math.random() < 0.5 ? -1 : 1;\n      const maxStep = 0.5 * deviation;\n      // Occasionally force a downward trend\n      const downwardChance = Math.random();\n      const stepBase = randStdNormal() * deviation * 0.3;\n      const step = downwardChance < 0.50 ? -Math.abs(stepBase) : stepBase * sign;\n\n      // Strong boost effect for 3 ticks, then expire\n      let boostValue = 0;\n      if (boostTicks < 3) {\n        boostValue = 20;\n        boostTicks++;\n        isBoostActive = true;\n      } else {\n        boostValue = 0;\n        isBoostActive = false;\n      }\n\n      // Calculate new engagement value\n      let newEngagement = prevEngagement*1.01 + step + boostValue;\n      newEngagement = Math.max(0, Math.min(100, newEngagement));\n      prevEngagement = newEngagement;\n\n      // Set fluctuationOffset and trendBoost so engagementScore reflects newEngagement\n      setFluctuationOffset(newEngagement - baseEngagementScore);\n      setTrendBoost(boostValue);\n\n    }, 1500);\n\n    return () => clearInterval(interval);\n  }, []);\n  return (\n    <>\n      <view style={{\n        position: 'absolute' as any,\n        left: '12px',\n        bottom: '120px',\n        zIndex: 10,\n        backgroundColor: 'rgba(0, 0, 0, 0.7)',\n        borderRadius: '25px',\n        padding: isExpanded ? '16px' : '8px',\n        minHeight: isExpanded ? '200px' : '60px',\n        width: isExpanded ? '160px' : '48px',\n      }}>\n        {!isExpanded ? (\n          // Collapsed state\n          <view \n            style={{\n              display: 'flex' as any,\n              flexDirection: 'column' as any,\n              alignItems: 'center' as any,\n              height: '100%'\n            }}\n            bindtap={handleExpand}\n          >\n            <text style={{\n              fontSize: '20px',\n              marginBottom: '6px'\n            }}>\n              🚀\n            </text>\n            <view style={{\n              width: '6px',\n              height: '45px',\n              backgroundColor: '#333',\n              borderRadius: '3px',\n              overflow: 'hidden' as any,\n              display: 'flex' as any,\n              alignItems: 'flex-end' as any\n            }}>\n              <view style={{\n                width: '100%',\n                height: `${scorePercentage}%`,\n                backgroundColor: scorePercentage > 70 ? '#00ff88' : scorePercentage > 40 ? '#ffaa00' : '#ff4444',\n                borderRadius: '2px'\n              }} />\n            </view>\n          </view>\n        ) : (\n          // Expanded state\n          <view style={{\n            display: 'flex' as any,\n            flexDirection: 'column' as any,\n            height: '100%'\n          }}>\n            <view style={{\n              display: 'flex' as any,\n              flexDirection: 'row' as any,\n              justifyContent: 'space-between' as any,\n              alignItems: 'center' as any,\n              marginBottom: '12px'\n            }}>\n              <text style={{\n                color: '#fff',\n                fontSize: '14px',\n                fontWeight: 'bold' as any\n              }}>\n                Engagement\n              </text>\n              <text \n                style={{\n                  color: '#fff',\n                  fontSize: '16px',\n                  cursor: 'pointer' as any\n                }}\n                bindtap={handleCollapse}\n              >\n                ×\n              </text>\n            </view>\n\n            <view style={{\n              marginBottom: '12px'\n            }}>\n              <text style={{\n                color: '#fff',\n                fontSize: '20px',\n                fontWeight: 'bold' as any,\n                textAlign: 'center' as any\n              }}>\n                {scorePercentage.toFixed(1)}\n              </text>\n              <view style={{\n                width: '100%',\n                height: '8px',\n                backgroundColor: '#333',\n                borderRadius: '4px',\n                overflow: 'hidden' as any,\n                marginTop: '4px'\n              }}>\n                <view style={{\n                  width: `${scorePercentage}%`,\n                  height: '100%',\n                  backgroundColor: scorePercentage > 70 ? '#00ff88' : scorePercentage > 40 ? '#ffaa00' : '#ff4444',\n                  borderRadius: '4px'\n                }} />\n              </view>\n            </view>\n\n            {/* Phase Information */}\n            <view style={{ marginBottom: '12px' }}>\n              <text style={{\n                color: getPhaseColor(),\n                fontSize: '10px',\n                textAlign: 'center' as any,\n                fontWeight: 'bold' as any,\n                marginBottom: '2px'\n              }}>\n                {getPhaseLabel()}\n              </text>\n              <text style={{\n                color: '#888',\n                fontSize: '9px',\n                textAlign: 'center' as any\n              }}>\n                {getPhaseTimeRemaining()}\n              </text>\n            </view>\n\n            <view style={{ marginBottom: '12px' }}>\n              <text style={{\n                color: '#888',\n                fontSize: '11px',\n                textAlign: 'center' as any,\n                marginBottom: '4px'\n              }}>\n                Pool: {formatNumber(video.boostPool)} 🪙\n              </text>\n              <text style={{\n                color: '#888',\n                fontSize: '11px',\n                textAlign: 'center' as any\n              }}>\n                Boosts: {video.totalBoosts}\n              </text>\n              {video.finalPrizePool && (\n                <text style={{\n                  color: '#4dabf7',\n                  fontSize: '10px',\n                  textAlign: 'center' as any,\n                  marginTop: '2px'\n                }}>\n                  Final: {formatNumber(video.finalPrizePool)} 🪙\n                </text>\n              )}\n            </view>\n\n            {/* Action Buttons */}\n            {canBoost ? (\n              <view\n                style={{\n                  backgroundColor: '#ff0050',\n                  padding: '8px',\n                  paddingLeft: '12px',\n                  paddingRight: '12px',\n                  borderRadius: '20px',\n                  cursor: 'pointer' as any,\n                  marginTop: 'auto'\n                }}\n                bindtap={handleOpenBoost}\n              >\n                <text style={{\n                  color: '#fff',\n                  fontSize: '12px',\n                  fontWeight: 'bold' as any,\n                  textAlign: 'center' as any\n                }}>\n                  🚀 Boost\n                </text>\n              </view>\n            ) : currentPhase === 'claiming' ? (\n              <view>\n                <view\n                  style={{\n                    backgroundColor: '#4dabf7',\n                    padding: '6px',\n                    borderRadius: '15px',\n                    cursor: 'pointer' as any,\n                    marginBottom: '4px'\n                  }}\n                  bindtap={() => {/* TODO: Handle claim */}}\n                >\n                  <text style={{\n                    color: '#fff',\n                    fontSize: '10px',\n                    fontWeight: 'bold' as any,\n                    textAlign: 'center' as any\n                  }}>\n                    💰 Claim\n                  </text>\n                </view>\n                <view\n                  style={{\n                    backgroundColor: '#666',\n                    padding: '4px',\n                    borderRadius: '10px',\n                    cursor: 'pointer' as any\n                  }}\n                  bindtap={() => {/* TODO: Handle withdraw */}}\n                >\n                  <text style={{\n                    color: '#fff',\n                    fontSize: '9px',\n                    textAlign: 'center' as any\n                  }}>\n                    ↩️ Withdraw\n                  </text>\n                </view>\n              </view>\n            ) : (\n              <view\n                style={{\n                  backgroundColor: '#666',\n                  padding: '8px',\n                  borderRadius: '20px',\n                  opacity: 0.6\n                }}\n              >\n                <text style={{\n                  color: '#fff',\n                  fontSize: '12px',\n                  textAlign: 'center' as any\n                }}>\n                  {currentPhase === 'locked' ? '🔒 Locked' : '⏰ Closed'}\n                </text>\n              </view>\n            )}\n          </view>\n        )}\n      </view>\n\n      <BoostModal\n        isOpen={isBoostModalOpen}\n        onClose={handleCloseBoost}\n        onBoost={onBoost}\n        userCoins={user.coins}\n        videoId={video.id}\n      />\n    </>\n  );\n};\n\nexport default EngagementBar;\n","__webpack_require__.h = () => (\"109a72932c29ba9d\")","\n__webpack_require__.cssHotUpdateList = [[\"main__main-thread\",\".rspeedy/main__main-thread/main__main-thread.bb7d82a520f94ae2.css.hot-update.json\"]];\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;AAuIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AApBA;;;;;;;;AArEA;;AAYA;;;AAQA;;;AAMA;;;;;AAQA;;;;;AAWA;;;AACA;;;;;;;;;AAOA;;;;;AAQA;;;AACA;;;;;;;AAsCA;;;AAOA;;;AAWA;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1KA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAMA;AAAA;AAEA;AAGA;AAAA;AAEA;AAEA;;;;AAkIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAtFA;;AAkBA;AAMA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAIA;;;;;;AAhBA;;;;;;;;;;;AAsEA;;;;;;;;AAOA;;;;AA2IA;;AAQA;;;;;AAMA;;;;;;;;;;;;;;;;;;;;AAqDA;;;;;;;;;;;;;;;;;;;AAoCA;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;AAcA;;AAWA;;;;;;;;;;;;;;;;AAYA;;;AASA;;;;;AAUA;;;AAQA;;;;;;;;;;;;;;;;;;;;AAWA;;AAOA;;;;;;;;;;;;;;;AAlLA;;AAKA;;;AAOA;;;;;AAQA;;;;;AAWA;;;;;AAWA;;;;;AAkBA;;;;;;;AAmBA;;;AACA;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlQA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAKA;AAKA;AAKA;AAEA;AACA;AA6CA;;AAEA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AA0BA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;;;AAmDA;AACA;AACA;AACA;AACA;AACA;;;AArBA;AAMA;;;;;;AAqBA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;;;;AAEA;AAKA;;;;;;;AAWA;;;AAOA;;;AAEA;AAOA;;;;;;;;AAMA;;;;;;;;AAsBA;;;;;;;;;AAwCA;AAaA;;;;;;;;;;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAIA;AAEA;;;;;;;;;;;;;;;;;;AChkBA;;;;ACAA;AACA"}
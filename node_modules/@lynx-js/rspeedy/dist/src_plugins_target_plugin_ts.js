export const __webpack_ids__ = [
    "src_plugins_target_plugin_ts"
];
export const __webpack_modules__ = {
    "./src/plugins/target.plugin.ts": function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__);
        __webpack_require__.d(__webpack_exports__, {
            pluginTarget: ()=>pluginTarget
        });
        var _utils_getESVersionTarget_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/getESVersionTarget.ts");
        var _utils_is_web_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/is-web.ts");
        function pluginTarget() {
            return {
                name: 'lynx:rsbuild:target',
                setup (api) {
                    api.modifyBundlerChain((options, { environment, isProd })=>{
                        if ((0, _utils_is_web_js__WEBPACK_IMPORTED_MODULE_1__.$)(environment)) options.target([
                            (0, _utils_getESVersionTarget_js__WEBPACK_IMPORTED_MODULE_0__.U)(isProd),
                            'web'
                        ]);
                        else options.target([
                            (0, _utils_getESVersionTarget_js__WEBPACK_IMPORTED_MODULE_0__.U)(isProd)
                        ]);
                    });
                }
            };
        }
    },
    "./src/utils/getESVersionTarget.ts": function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            U: ()=>getESVersionTarget
        });
        function getESVersionTarget(isProd) {
            return isProd ? 'es2015' : 'es2019';
        }
    },
    "./src/utils/is-web.ts": function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            $: ()=>isWeb
        });
        function isWeb(environment) {
            return 'string' == typeof environment ? 'web' === environment : 'web' === environment.name;
        }
    }
};
